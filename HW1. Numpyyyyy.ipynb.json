{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5a751406",
   "metadata": {},
   "source": [
    "# Домашнее задание 1: Numpy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99dc7e09",
   "metadata": {},
   "source": [
    "# Разминка"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2af9d48a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-07T17:08:20.430760Z",
     "start_time": "2021-08-07T17:08:20.427198Z"
    }
   },
   "source": [
    "Прочитайте про типизацию в Python: \n",
    "https://tproger.ru/articles/python-typing/ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4f7579c6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-07T17:10:31.598455Z",
     "start_time": "2021-08-07T17:10:31.595106Z"
    }
   },
   "outputs": [],
   "source": [
    "from typing import List, Union\n",
    "import array\n",
    "\n",
    "Num = Union[int, float]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "191a5ad9",
   "metadata": {},
   "source": [
    "0.Импортируйте numpy и убедитесь, что импорт прошёл без ошибок. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1621d51f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a27a4751",
   "metadata": {},
   "source": [
    "1.Реализуйте скалярное умножение (dot product) двух списков типа Python list на чистом Python (используя цикл, без дополнительных библиотек) как фукнцию pure_python_dot_product.\n",
    "\n",
    "Примечание: dot = 0 - это заглушка, чтоб функция работала даже если код отсутствиует. Вы можете менять тело функции как вам угодно, только не забудьте вернуть то, что требуется в задании."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8550b115",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-07T17:10:42.473320Z",
     "start_time": "2021-08-07T17:10:42.470153Z"
    }
   },
   "outputs": [],
   "source": [
    "def pure_python_dot_product(l1: List[Num], l2: List[Num]) -> float:\n",
    "    dot = 0\n",
    "    for x, y in zip(l1, l2):\n",
    "        dot += x * y\n",
    "    \n",
    "    return dot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd805fe1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-07T16:49:57.316102Z",
     "start_time": "2021-08-07T16:49:57.313036Z"
    }
   },
   "source": [
    "2.Обратитесь к документации или в Google и выясните, за что отвечает функция assert?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17dd5b31",
   "metadata": {},
   "source": [
    "Assertions (утверждения) — это инструкции, которые «утверждают» определенный кейс в программе. \n",
    "В Python они выступают булевыми выражениями, которые проверяют, является ли условие истинным или ложным.\n",
    "Если оно истинно, то программа ничего не делает и переходит к выполнению следующей строчки кода.\n",
    "Но если оно ложно, то программа останавливается и возвращает ошибку."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83143814",
   "metadata": {},
   "source": [
    "3.Замерьте скорость работы python_pure_dot_product на списках a и b, используя Jupyter magic %%timeit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2a443b36",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-21T21:44:23.125185Z",
     "start_time": "2021-12-21T21:44:23.122120Z"
    }
   },
   "outputs": [],
   "source": [
    "a = range(1,1000,2)\n",
    "b = range(2000,4000, 4)\n",
    "assert len(a) == len(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8cdf42f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84.9 µs ± 4.43 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit \n",
    "pure_python_dot_product(a,b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3209f1d7",
   "metadata": {},
   "source": [
    "4.Реализуйте скалярное умножение двух массивов типа ndarray, используя Numpy как функицю numpy_dot_product. В параметрах функции numpy_dot_product определите тип входящих переменных."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0e0b691d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-07T17:00:35.610755Z",
     "start_time": "2021-08-07T17:00:35.607633Z"
    }
   },
   "outputs": [],
   "source": [
    "def numpy_dot_product(l1: List[Num], l2: List[Num]) -> float:\n",
    "    dot = 0\n",
    "    for x, y in zip(l1, l2):\n",
    "        dot += x * y\n",
    "    return dot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69399772",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-07T17:03:28.355746Z",
     "start_time": "2021-08-07T17:03:28.352113Z"
    }
   },
   "source": [
    "5.Преобразуйте списки a, b в массивы Numpy, запишите их соответственно в переменные a_ar, b_ar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f1b3b319",
   "metadata": {},
   "outputs": [],
   "source": [
    "a_ar = np.array(a)\n",
    "b_ar = np.array(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66c5ee8d",
   "metadata": {},
   "source": [
    "6.Замерьте скорость работы numpy_dot_product на массивах a_ar и b_ar, используя Jupyter magic %%timeit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0b56af75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "167 µs ± 3.72 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit \n",
    "numpy_dot_product(a_ar,b_ar)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e410975",
   "metadata": {},
   "source": [
    "7.Сравните результаты полученные фукнкциями  numpy_dot_product и pure_python_dot_product. Они должны совпадать. Покажите, что они совпадают."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d776a5e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "832833000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numpy_dot_product(a_ar,b_ar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "468b8cfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "832833000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pure_python_dot_product(a,b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a66017c2",
   "metadata": {},
   "source": [
    "# Чтение из файла. Использование функций Numpy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8d48573",
   "metadata": {},
   "source": [
    "https://www.cs.toronto.edu/~frossard/post/linear_regression/"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9f0c1c7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T13:28:50.924076Z",
     "start_time": "2021-08-27T13:28:50.921121Z"
    }
   },
   "source": [
    "8.Считайте в переменную data_x данные из файла 'data_x.npy' и выведите первые 5 элементов data_x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7a56071f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.1       ],\n",
       "       [0.10909091],\n",
       "       [0.11818182],\n",
       "       [0.12727273],\n",
       "       [0.13636364]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_x = np.load('data_x.npy')\n",
    "data_x[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2968c732",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T13:28:50.924076Z",
     "start_time": "2021-08-27T13:28:50.921121Z"
    }
   },
   "source": [
    "9.Считайте в переменную data_y данные из файла 'data_y.txt' и выведите первые 5 элементов data_y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "db0d8584",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.10668682, -0.1165718 ,  0.15178231,  0.52171016,  1.2676443 ])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_y = np.loadtxt('data_y.txt')\n",
    "data_y[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "247d2693",
   "metadata": {},
   "source": [
    "Давайте визуализируем загруженные данные.  \n",
    "Для этого импортируем pyplot и выполняем простую визуализацию. Разбор визуализаций будет далее в курсе. Но если вы уже сейчас разберётесь, что делает код - будет отлично!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "468968fc",
   "metadata": {},
   "source": [
    "Если у вас не импортируется matplotlib, надо его установить через pip / conda."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "43fb513f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T14:35:32.649944Z",
     "start_time": "2021-08-27T14:35:32.519610Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "\n",
    "plt.scatter(data_x, data_y)\n",
    "plt.xlabel('x data')\n",
    "plt.ylabel('y data')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcf9e683",
   "metadata": {},
   "source": [
    "10.С помощью numpy найдите максимум, минимум и форму (shape) x и y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "aad3ed8f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T13:39:42.031896Z",
     "start_time": "2021-08-27T13:39:42.027566Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1, 1.0, (100, 1), -1.4798856735208457, 11.870796258618977, (100,))"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min_x = data_x.min()\n",
    "max_x = data_x.max()\n",
    "shape_x = data_x.shape\n",
    "\n",
    "min_y = data_y.min()\n",
    "max_y = data_y.max()\n",
    "shape_y = data_y.shape\n",
    "\n",
    "min_x, max_x, shape_x, min_y, max_y, shape_y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c89f837",
   "metadata": {},
   "source": [
    "На графике заметно, что между х и у есть некоторая зависимость. Давайте её смоделируем с помощью линейной регресии, написанной на numpy. Решать задачу линейной регресии будем с помощью методов наименших квадратов."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "978899d2",
   "metadata": {},
   "source": [
    "11.Для построения линейной регрессии нам надо добавить столбец единичек к data_x как, чтоб в итоге data_x имел вид :\n",
    "```\n",
    "array([[1.        , 0.1       ],\n",
    "          [1.        , 0.10909091],\n",
    "          [1.        , 0.11818182],\n",
    "          [1.        , 0.12727273],\n",
    "          [1.        , 0.13636364],\n",
    "          ......\n",
    "         ]])\n",
    "```\n",
    "\n",
    "Используя функции numpy hstack и ones_like, добавьте столбец единичек к матрице data_x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8994415c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T13:52:14.974869Z",
     "start_time": "2021-08-27T13:52:14.972556Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.1       ],\n",
       "       [1.        , 0.10909091],\n",
       "       [1.        , 0.11818182],\n",
       "       [1.        , 0.12727273],\n",
       "       [1.        , 0.13636364]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ones=np.ones_like(data_x)\n",
    "data_x = np.hstack((ones,data_x))\n",
    "data_x[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f611cc6d",
   "metadata": {},
   "source": [
    "Наш датасет готов. Теперь нам надо его случайным образом разделить на train и test части. Это стандартная процедура в решении задач машинного обучения. Мы считаем, что test часть - это данные, которые не видила модель, и оценка целевой метрики на этом фрагменте данных даёт нам основания полагать, как модель будет себя вести на новых данных, которые мы ей \"скормим\" после завершения разработки. Тренировочные данные обычно нужны только для обучения весов, а для задач бизнеса модель запускается на новых для неё данных. Мы будем говорить о разбитии датасета на несколько частей ещё в следующих лекциях."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83a4d717",
   "metadata": {},
   "source": [
    "12.Наши данные похоже имеют тренд (значение y растёт со временем). Поэтому перед разделением данных мы не будем их перемешивать, как это часто делают.  \n",
    "Мы возьмём в test выборку последние 20 строк данных, а в трейн выборку - всё остальное. Создайте data_x, test_y, train_x, train_y, используя количество строк для теста, указанное в переменной portion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0433626e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T14:33:45.348272Z",
     "start_time": "2021-08-27T14:33:45.345548Z"
    }
   },
   "outputs": [],
   "source": [
    "portion = 20\n",
    "\n",
    "test_x = data_x[-20:]\n",
    "test_y = data_y[-20:]   \n",
    "train_x = data_x[:-20]\n",
    "train_y = data_y[:-20] "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f7d45ec",
   "metadata": {},
   "source": [
    "Выведите форму train_x, train_y, test_x, test_y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9731ee9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.82727273],\n",
       "       [1.        , 0.83636364],\n",
       "       [1.        , 0.84545455],\n",
       "       [1.        , 0.85454545],\n",
       "       [1.        , 0.86363636],\n",
       "       [1.        , 0.87272727],\n",
       "       [1.        , 0.88181818],\n",
       "       [1.        , 0.89090909],\n",
       "       [1.        , 0.9       ],\n",
       "       [1.        , 0.90909091],\n",
       "       [1.        , 0.91818182],\n",
       "       [1.        , 0.92727273],\n",
       "       [1.        , 0.93636364],\n",
       "       [1.        , 0.94545455],\n",
       "       [1.        , 0.95454545],\n",
       "       [1.        , 0.96363636],\n",
       "       [1.        , 0.97272727],\n",
       "       [1.        , 0.98181818],\n",
       "       [1.        , 0.99090909],\n",
       "       [1.        , 1.        ]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e7e52dde",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6.06823118,  5.84905078,  6.25301268,  6.34242826,  7.34004413,\n",
       "        6.90754169,  6.86474508,  6.50158242,  7.5810373 ,  7.61539427,\n",
       "        7.77702171,  7.76791721,  8.21856594,  8.10341573,  8.92347748,\n",
       "        9.34471084, 11.63137246, 11.44504345, 10.00033876, 11.87079626])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f4b2663f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.1       ],\n",
       "       [1.        , 0.10909091],\n",
       "       [1.        , 0.11818182],\n",
       "       [1.        , 0.12727273],\n",
       "       [1.        , 0.13636364],\n",
       "       [1.        , 0.14545455],\n",
       "       [1.        , 0.15454545],\n",
       "       [1.        , 0.16363636],\n",
       "       [1.        , 0.17272727],\n",
       "       [1.        , 0.18181818],\n",
       "       [1.        , 0.19090909],\n",
       "       [1.        , 0.2       ],\n",
       "       [1.        , 0.20909091],\n",
       "       [1.        , 0.21818182],\n",
       "       [1.        , 0.22727273],\n",
       "       [1.        , 0.23636364],\n",
       "       [1.        , 0.24545455],\n",
       "       [1.        , 0.25454545],\n",
       "       [1.        , 0.26363636],\n",
       "       [1.        , 0.27272727],\n",
       "       [1.        , 0.28181818],\n",
       "       [1.        , 0.29090909],\n",
       "       [1.        , 0.3       ],\n",
       "       [1.        , 0.30909091],\n",
       "       [1.        , 0.31818182],\n",
       "       [1.        , 0.32727273],\n",
       "       [1.        , 0.33636364],\n",
       "       [1.        , 0.34545455],\n",
       "       [1.        , 0.35454545],\n",
       "       [1.        , 0.36363636],\n",
       "       [1.        , 0.37272727],\n",
       "       [1.        , 0.38181818],\n",
       "       [1.        , 0.39090909],\n",
       "       [1.        , 0.4       ],\n",
       "       [1.        , 0.40909091],\n",
       "       [1.        , 0.41818182],\n",
       "       [1.        , 0.42727273],\n",
       "       [1.        , 0.43636364],\n",
       "       [1.        , 0.44545455],\n",
       "       [1.        , 0.45454545],\n",
       "       [1.        , 0.46363636],\n",
       "       [1.        , 0.47272727],\n",
       "       [1.        , 0.48181818],\n",
       "       [1.        , 0.49090909],\n",
       "       [1.        , 0.5       ],\n",
       "       [1.        , 0.50909091],\n",
       "       [1.        , 0.51818182],\n",
       "       [1.        , 0.52727273],\n",
       "       [1.        , 0.53636364],\n",
       "       [1.        , 0.54545455],\n",
       "       [1.        , 0.55454545],\n",
       "       [1.        , 0.56363636],\n",
       "       [1.        , 0.57272727],\n",
       "       [1.        , 0.58181818],\n",
       "       [1.        , 0.59090909],\n",
       "       [1.        , 0.6       ],\n",
       "       [1.        , 0.60909091],\n",
       "       [1.        , 0.61818182],\n",
       "       [1.        , 0.62727273],\n",
       "       [1.        , 0.63636364],\n",
       "       [1.        , 0.64545455],\n",
       "       [1.        , 0.65454545],\n",
       "       [1.        , 0.66363636],\n",
       "       [1.        , 0.67272727],\n",
       "       [1.        , 0.68181818],\n",
       "       [1.        , 0.69090909],\n",
       "       [1.        , 0.7       ],\n",
       "       [1.        , 0.70909091],\n",
       "       [1.        , 0.71818182],\n",
       "       [1.        , 0.72727273],\n",
       "       [1.        , 0.73636364],\n",
       "       [1.        , 0.74545455],\n",
       "       [1.        , 0.75454545],\n",
       "       [1.        , 0.76363636],\n",
       "       [1.        , 0.77272727],\n",
       "       [1.        , 0.78181818],\n",
       "       [1.        , 0.79090909],\n",
       "       [1.        , 0.8       ],\n",
       "       [1.        , 0.80909091],\n",
       "       [1.        , 0.81818182]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6e8faae9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.10668682, -0.1165718 ,  0.15178231,  0.52171016,  1.2676443 ,\n",
       "        0.64190188,  1.04303869,  0.2079576 ,  0.49261243,  0.03490578,\n",
       "       -1.47025565, -0.2068185 , -1.47988567, -0.56610172, -1.11631492,\n",
       "        0.69665152,  0.25100068,  0.05788669,  0.50220773,  0.87672868,\n",
       "       -0.41432073,  0.66240397, -0.50525403,  1.5686496 ,  1.9847193 ,\n",
       "        1.61817786,  1.51314545,  0.43541768,  1.50592827,  2.76664423,\n",
       "        2.67471615,  2.48658041,  2.30211601,  2.05019316,  4.17203195,\n",
       "        4.03092456,  1.94000444,  0.98782112,  1.95501754,  2.99753587,\n",
       "        3.97365061,  2.30998155,  2.48312305,  2.55338429,  0.45645464,\n",
       "        1.1542799 ,  2.23846023,  1.74570162,  1.08106722,  2.34042834,\n",
       "        1.68314762,  1.83363218,  1.02508125,  2.19160618,  2.25832941,\n",
       "        3.86805161,  2.67561082,  4.79611318,  4.32650243,  3.98829826,\n",
       "        4.07543622,  3.14846013,  4.93869195,  6.51277114,  4.21055252,\n",
       "        3.88361313,  5.73054591,  5.03933284,  7.1874341 ,  5.1056601 ,\n",
       "        5.7426742 ,  5.56244133,  6.59923306,  6.75511223,  6.6860462 ,\n",
       "        7.53655826,  7.44780002,  6.36841425,  6.29854155,  6.63585145])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25c709a6",
   "metadata": {},
   "source": [
    "Чтобы посмотреть, как разделились в случае правильной имплементации наши данные на трейн и тест выборки, запустите код ниже."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "134e6d13",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T14:55:46.287733Z",
     "start_time": "2021-08-27T14:55:46.175661Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_test_labels = [0]*(data_x.shape[0] - portion) + [1] * portion\n",
    "\n",
    "plt.scatter(data_x[:,1], data_y, c=train_test_labels)\n",
    "plt.xlabel('x data')\n",
    "plt.ylabel('y data')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68473839",
   "metadata": {},
   "source": [
    "Видим, что тест - это последние 20% данных, которые другого цвета на графике."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ee1848d",
   "metadata": {},
   "source": [
    "13.Теперь нам надо написать функцию поиска весов в линейной регресии. В этом вам помогут слайды с лекции. Найдите формулу для w и реализуйте её с помощью numpy. \n",
    "\n",
    "Используйте для поиска w train_x и train_y данные.\n",
    "\n",
    "Помните, что в формуле у нас происходит матричное умножение.\n",
    "\n",
    "Количество весов должно быть равно количеству колонок в train_x.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c73964eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.86139236,  9.61107802])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transpose = np.matrix.transpose(train_x)\n",
    "trans_x = np.dot(np.matrix.transpose(train_x),train_x)\n",
    "linalg = np.linalg.inv(trans_x)\n",
    "w = np.dot(np.dot(linalg,transpose),train_y)\n",
    "w"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9d4db15",
   "metadata": {},
   "source": [
    "14.Давайте теперь посмотрим на то, как выглядит то предсказание, которое строит наша модель с найденными весами.  \n",
    "\n",
    "Для начала напишем функцию, которая будет нам возвращать предсказания для заданного набора x и параметров модели w.  \n",
    "Функция `get_predict` должна возвращать произведение марицы x на w. Размерность возращаемого значения должна быть равна количеству строк в x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "70d5141d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T14:44:22.993979Z",
     "start_time": "2021-08-27T14:44:22.991608Z"
    }
   },
   "outputs": [],
   "source": [
    "def get_predict(x, w):\n",
    "    \n",
    "    m = np.dot(x,w)\n",
    "    \n",
    "    return m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0d3f9373",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T14:55:55.085330Z",
     "start_time": "2021-08-27T14:55:55.082639Z"
    }
   },
   "outputs": [],
   "source": [
    "train_predict = get_predict(train_x, w)\n",
    "test_predict = get_predict(test_x, w)\n",
    "full_data_predict = get_predict(data_x, w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cdd2ee7c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T14:55:58.759900Z",
     "start_time": "2021-08-27T14:55:58.603053Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_test_labels = [0] * (data_x.shape[0] - portion) + [1] * portion\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.scatter(data_x[:,1], data_y, c=train_test_labels)\n",
    "plt.plot(data_x[:,1], full_data_predict, color = \"green\", label = 'prediction')\n",
    "plt.xlabel('x data')\n",
    "plt.ylabel('y data')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bbc531a",
   "metadata": {},
   "source": [
    "Можем видеть, что мы неплохо угадали направление тренировочных данных, но не угадали динамику. Также на тестовой выборке в самом конце мы сильно ошибаемся (данные идут вверх более стремительно, чем линия предсказания).  \n",
    "\n",
    "Можем посмотреть отдельно на тестовой и тренировочной выборках взаимное расположение данных и предсказаний.   \n",
    "Запустите две клетки ниже."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d864d7d8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T14:56:02.019631Z",
     "start_time": "2021-08-27T14:56:01.744966Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(train_x[:,1], train_y, color = \"red\", label='real data')\n",
    "plt.plot(train_x[:,1], train_predict, color = \"green\", label = 'prediction')\n",
    "plt.title(\"Model vs real data (Training set)\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bf14d08c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T14:56:07.744156Z",
     "start_time": "2021-08-27T14:56:07.581452Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(test_x[:,1], test_y, color = \"blue\", label='real data')\n",
    "plt.plot(test_x[:,1], test_predict, color = \"green\", label = 'prediction')\n",
    "plt.title(\"Model vs real data (Test set)\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbe78b87",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-08-27T14:57:36.833574Z",
     "start_time": "2021-08-27T14:57:36.830528Z"
    }
   },
   "source": [
    "Видим, что действительно, линия проходит ниже большинства точек тестового набора данных. Модель точно можно улучшить.\n",
    "\n",
    "Далее в курсе мы научимся это делать :)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
